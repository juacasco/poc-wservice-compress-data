//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WService_ConceptTest_Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IExecQuery")]
    public interface IExecQuery {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/answerTest", ReplyAction="http://tempuri.org/IExecQuery/answerTestResponse")]
        WService_ConceptTest_Client.ServiceReference1.answerTestResponse answerTest(WService_ConceptTest_Client.ServiceReference1.answerTestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/answerTest", ReplyAction="http://tempuri.org/IExecQuery/answerTestResponse")]
        System.Threading.Tasks.Task<WService_ConceptTest_Client.ServiceReference1.answerTestResponse> answerTestAsync(WService_ConceptTest_Client.ServiceReference1.answerTestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/GetServerDate", ReplyAction="http://tempuri.org/IExecQuery/GetServerDateResponse")]
        System.DateTime GetServerDate(double addHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/GetServerDate", ReplyAction="http://tempuri.org/IExecQuery/GetServerDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetServerDateAsync(double addHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/GetData", ReplyAction="http://tempuri.org/IExecQuery/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecQuery/GetData", ReplyAction="http://tempuri.org/IExecQuery/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="answerTest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class answerTestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string querySelectCmd;
        
        public answerTestRequest() {
        }
        
        public answerTestRequest(string querySelectCmd) {
            this.querySelectCmd = querySelectCmd;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="answerTestResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class answerTestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] answerTestResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long notZipLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long zipLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.DateTime[] timeCaptures;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string[] strTimeCaptures;
        
        public answerTestResponse() {
        }
        
        public answerTestResponse(byte[] answerTestResult, long notZipLength, long zipLength, System.DateTime[] timeCaptures, string[] strTimeCaptures) {
            this.answerTestResult = answerTestResult;
            this.notZipLength = notZipLength;
            this.zipLength = zipLength;
            this.timeCaptures = timeCaptures;
            this.strTimeCaptures = strTimeCaptures;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecQueryChannel : WService_ConceptTest_Client.ServiceReference1.IExecQuery, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecQueryClient : System.ServiceModel.ClientBase<WService_ConceptTest_Client.ServiceReference1.IExecQuery>, WService_ConceptTest_Client.ServiceReference1.IExecQuery {
        
        public ExecQueryClient() {
        }
        
        public ExecQueryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExecQueryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecQueryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecQueryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WService_ConceptTest_Client.ServiceReference1.answerTestResponse WService_ConceptTest_Client.ServiceReference1.IExecQuery.answerTest(WService_ConceptTest_Client.ServiceReference1.answerTestRequest request) {
            return base.Channel.answerTest(request);
        }
        
        public byte[] answerTest(string querySelectCmd, out long notZipLength, out long zipLength, out System.DateTime[] timeCaptures, out string[] strTimeCaptures) {
            WService_ConceptTest_Client.ServiceReference1.answerTestRequest inValue = new WService_ConceptTest_Client.ServiceReference1.answerTestRequest();
            inValue.querySelectCmd = querySelectCmd;
            WService_ConceptTest_Client.ServiceReference1.answerTestResponse retVal = ((WService_ConceptTest_Client.ServiceReference1.IExecQuery)(this)).answerTest(inValue);
            notZipLength = retVal.notZipLength;
            zipLength = retVal.zipLength;
            timeCaptures = retVal.timeCaptures;
            strTimeCaptures = retVal.strTimeCaptures;
            return retVal.answerTestResult;
        }
        
        public System.Threading.Tasks.Task<WService_ConceptTest_Client.ServiceReference1.answerTestResponse> answerTestAsync(WService_ConceptTest_Client.ServiceReference1.answerTestRequest request) {
            return base.Channel.answerTestAsync(request);
        }
        
        public System.DateTime GetServerDate(double addHours) {
            return base.Channel.GetServerDate(addHours);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetServerDateAsync(double addHours) {
            return base.Channel.GetServerDateAsync(addHours);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
    }
}
